#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import os


class ParseOpcodes:

    def __init__(self, file="../src/lib/logger.h"):
        self._filename = file
        self._output_file = "opcodes.py"
        self._opcodes = {}

    def parse_opcodes(self):
        with open(self._filename, 'r') as fd:            
            op_index = 0
            found = False
            for line in fd.readlines():
                if "log_opcode_e" in line:
                    found = True
                    continue
                if "log_opcode_t" in line:
                    break
                if found and "LOG_OPCODE_" in line:
                    items = line.split(",")
                    opcode_string = items[0].lstrip()
                    self._opcodes[op_index] = opcode_string.replace("LOG_OPCODE_", "")
                    op_index += 1

    def write_opcodes(self):
        with open(self._output_file, "w") as fd:
            print("# This file is generated by parse_opcodes.py.", file=fd)
            print("", file=fd)
            print("opcodes = {", file=fd)
            for opcode, op_string in self._opcodes.items():
                print(f'    {opcode}: "{op_string}",', file=fd)
            print("}", file=fd)

    def run(self):
        self.parse_opcodes()
        self.write_opcodes()


if __name__ == "__main__":
    t = ParseOpcodes()

    t.run()
